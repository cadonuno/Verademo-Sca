# This is an example YAML for implementing Veracode Agent-Based SCA and Static Pipeline Scans
# The examples use VERACODE_ID from a Variable but, for a real-life environment, it is better to keep it on a Secrets Vault.
# Same goes for VERACODE_SECRET and SCA_TOKEN

# Your triggers may vary, but will usually be linked to a push to a feature branch or a pull request open/sync
trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:

# LINUX/MAC: This step will package the application and save the artifacts to a folder called 'verascan'
- task: CmdLine@2
  name: "VeracodePackage"
  env:
    VERACODE_API_KEY_ID: $(VERACODE_ID)
    VERACODE_API_KEY_SECRET: $(VERACODE_SECRET)
  inputs:
    script: |
      curl -fsS https://tools.veracode.com/veracode-cli/install | sh
      ./veracode package -das . --output verascan

# WINDOWS: This step will package the application and save the artifacts to a folder called 'verascan'
- task: PowerShell@2
  name: "VeracodePackage"
  env:
    VERACODE_API_KEY_ID: $(VERACODE_ID)
    VERACODE_API_KEY_SECRET: $(VERACODE_SECRET)
  inputs:
    targetType: 'inline'
    script: |
      Set-ExecutionPolicy AllSigned -Scope Process -Force
            $ProgressPreference = "silentlyContinue"; iex ((New-Object System.Net.WebClient).DownloadString('https://tools.veracode.com/veracode-cli/install.ps1'))
            veracode package -das <folder to package> --output ./verascan

# LINUX/MAC: This step will call an agent-based SCA scan
- task: CmdLine@2
  name: "VeracodeSCA"
  env:
    SRCCLR_API_TOKEN: $(SCA_TOKEN)
    SRCCLR_REGION: 'COM' # - Commercial Region. The default.
                 # 'ER' - European Region.
                 # 'FED' - United States Federal Region.
  inputs:
    script: curl -sSL https://sca-downloads.veracode.com/ci.sh | sh

# WINDOWS: This step will call an agent-based SCA scan
- task: PowerShell@2
  env:
    SRCCLR_API_TOKEN: $(SCA_TOKEN)
    SRCCLR_REGION: 'COM' # - Commercial Region. The default.
                 # 'ER' - European Region.
                 # 'FED' - United States Federal Region.
  inputs:
    targetType: 'inline'
    script: |
      Set-ExecutionPolicy AllSigned -Scope Process -Force
             $ProgressPreference = 'SilentlyContinue'
             [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
             iex ((New-Object System.Net.WebClient).DownloadString('https://sca-downloads.veracode.com/ci.ps1')); srcclr scan <folder to scan>

# LINUX/MAC: This step will call a Veracode Pipeline Scan. This example fetches your security policy from Veracode to filter the scan results, but a different fail criteria can be used if needed - uses the veracode CLI installed in line 22
# depending on your runner configuration, this might need to run within the same task as VeracodePackage (line 22-23)
- task: CmdLine@2
  name: "VeracodePipelineScan"
  env:
    VERACODE_API_KEY_ID: $(VERACODE_ID)
    VERACODE_API_KEY_SECRET: $(VERACODE_SECRET)
  inputs:
    script: |
      ./veracode policy get "<name of the policy to use>" # can be removed if using a different fail criteria
      for file in verascan/*; do
        if [ -f "$file" ]; then
          echo "Scanning $file ..."
          ./veracode static scan "$file" --policy-file <name of the policy to use (replace any spaces with underscores)>.json
        fi
      done

# WINDOWS: This step will call a Veracode Pipeline Scan.  This example fetches your security policy from Veracode to filter the scan results, but a different fail criteria can be used if needed - uses the veracode CLI installed in lines 34-35
# depending on your runner configuration, this might need to run within the same task as VeracodePackage (line 34-36)
- task: PowerShell@2
  env:
    VERACODE_API_KEY_ID: $(VERACODE_ID)
    VERACODE_API_KEY_SECRET: $(VERACODE_SECRET)
  inputs:
    targetType: 'inline'
    script: |
      veracode policy get <name of the policy to use> # can be removed if using a different fail criteria
      Get-ChildItem "./verascan" | 
      Foreach-Object {
        $toScan=$_.FullName
        veracode static scan "$toScan" --policy-file <name of the policy to use (replace any spaces with underscores)>.json
      }
